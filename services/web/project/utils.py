import time
from sqlalchemy.sql import text
from flask import Flask, send_from_directory, g, request
import flask


def render_template(name, **kwargs):
    '''
    like the flask render_template function, but also passes the debug information generated by calls to the do_query function
    '''

    # compute total time in debug_timers
    total_debug_timers = 0
    for timer in g.debug_timers:
        total_debug_timers += timer['runtime']
    g.debug_timers.append({
        'name': '[total]',
        'runtime': total_debug_timers,
        })

    # call render_template with debug information added
    return flask.render_template(
        name,
        queries=g.queries,
        debug_timers=g.debug_timers,
        **kwargs
        )


def do_query(name, sql, binds):
    '''
    performs a query with the database and records debug information that will be stored for later
    '''
    start = time.time()
    res = list(g.connection.execute(text(sql), binds))
    explain = '\n'.join(map(lambda x:x[0], g.connection.execute(text('explain '+sql), binds)))
    stop = time.time()
    g.queries.append({
        'name': name,
        'sql': sql,
        'binds': binds,
        'runtime': stop-start,
        'explain': str(explain),
        })
    return list(res)


class debug_timer:
    '''
    time code inside a with block
    '''
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.start = time.time()

    def __exit__(self, type, value, traceback):
        g.debug_timers.append({
            'name': self.name,
            'runtime': time.time() - self.start,
            })



